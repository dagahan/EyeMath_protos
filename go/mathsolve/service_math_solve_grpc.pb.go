// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service_math_solve.proto

package mathsolve

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCMathSolveClient is the client API for GRPCMathSolve service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCMathSolveClient interface {
	Metadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error)
	Solve(ctx context.Context, in *SolveRequest, opts ...grpc.CallOption) (*SolveResponse, error)
}

type gRPCMathSolveClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCMathSolveClient(cc grpc.ClientConnInterface) GRPCMathSolveClient {
	return &gRPCMathSolveClient{cc}
}

func (c *gRPCMathSolveClient) Metadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error) {
	out := new(MetadataResponse)
	err := c.cc.Invoke(ctx, "/mathsolve.GRPC_math_solve/Metadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCMathSolveClient) Solve(ctx context.Context, in *SolveRequest, opts ...grpc.CallOption) (*SolveResponse, error) {
	out := new(SolveResponse)
	err := c.cc.Invoke(ctx, "/mathsolve.GRPC_math_solve/Solve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCMathSolveServer is the server API for GRPCMathSolve service.
// All implementations must embed UnimplementedGRPCMathSolveServer
// for forward compatibility
type GRPCMathSolveServer interface {
	Metadata(context.Context, *MetadataRequest) (*MetadataResponse, error)
	Solve(context.Context, *SolveRequest) (*SolveResponse, error)
	mustEmbedUnimplementedGRPCMathSolveServer()
}

// UnimplementedGRPCMathSolveServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCMathSolveServer struct {
}

func (UnimplementedGRPCMathSolveServer) Metadata(context.Context, *MetadataRequest) (*MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metadata not implemented")
}
func (UnimplementedGRPCMathSolveServer) Solve(context.Context, *SolveRequest) (*SolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Solve not implemented")
}
func (UnimplementedGRPCMathSolveServer) mustEmbedUnimplementedGRPCMathSolveServer() {}

// UnsafeGRPCMathSolveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCMathSolveServer will
// result in compilation errors.
type UnsafeGRPCMathSolveServer interface {
	mustEmbedUnimplementedGRPCMathSolveServer()
}

func RegisterGRPCMathSolveServer(s grpc.ServiceRegistrar, srv GRPCMathSolveServer) {
	s.RegisterService(&GRPCMathSolve_ServiceDesc, srv)
}

func _GRPCMathSolve_Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCMathSolveServer).Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mathsolve.GRPC_math_solve/Metadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCMathSolveServer).Metadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCMathSolve_Solve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCMathSolveServer).Solve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mathsolve.GRPC_math_solve/Solve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCMathSolveServer).Solve(ctx, req.(*SolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCMathSolve_ServiceDesc is the grpc.ServiceDesc for GRPCMathSolve service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCMathSolve_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mathsolve.GRPC_math_solve",
	HandlerType: (*GRPCMathSolveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Metadata",
			Handler:    _GRPCMathSolve_Metadata_Handler,
		},
		{
			MethodName: "Solve",
			Handler:    _GRPCMathSolve_Solve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_math_solve.proto",
}
