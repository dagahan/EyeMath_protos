// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: service_math_solve.proto

package mathsolve

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GRPCMathSolve_MetaDataSolve_FullMethodName = "/mathsolve.GRPCMathSolve/meta_data_solve"
	GRPCMathSolve_Solve_FullMethodName         = "/mathsolve.GRPCMathSolve/solve"
)

// GRPCMathSolveClient is the client API for GRPCMathSolve service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCMathSolveClient interface {
	MetaDataSolve(ctx context.Context, in *MetaDataSolveRequest, opts ...grpc.CallOption) (*MetaDataSolveResponse, error)
	Solve(ctx context.Context, in *SolveRequest, opts ...grpc.CallOption) (*SolveResponse, error)
}

type gRPCMathSolveClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCMathSolveClient(cc grpc.ClientConnInterface) GRPCMathSolveClient {
	return &gRPCMathSolveClient{cc}
}

func (c *gRPCMathSolveClient) MetaDataSolve(ctx context.Context, in *MetaDataSolveRequest, opts ...grpc.CallOption) (*MetaDataSolveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetaDataSolveResponse)
	err := c.cc.Invoke(ctx, GRPCMathSolve_MetaDataSolve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCMathSolveClient) Solve(ctx context.Context, in *SolveRequest, opts ...grpc.CallOption) (*SolveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SolveResponse)
	err := c.cc.Invoke(ctx, GRPCMathSolve_Solve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCMathSolveServer is the server API for GRPCMathSolve service.
// All implementations must embed UnimplementedGRPCMathSolveServer
// for forward compatibility.
type GRPCMathSolveServer interface {
	MetaDataSolve(context.Context, *MetaDataSolveRequest) (*MetaDataSolveResponse, error)
	Solve(context.Context, *SolveRequest) (*SolveResponse, error)
	mustEmbedUnimplementedGRPCMathSolveServer()
}

// UnimplementedGRPCMathSolveServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGRPCMathSolveServer struct{}

func (UnimplementedGRPCMathSolveServer) MetaDataSolve(context.Context, *MetaDataSolveRequest) (*MetaDataSolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetaDataSolve not implemented")
}
func (UnimplementedGRPCMathSolveServer) Solve(context.Context, *SolveRequest) (*SolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Solve not implemented")
}
func (UnimplementedGRPCMathSolveServer) mustEmbedUnimplementedGRPCMathSolveServer() {}
func (UnimplementedGRPCMathSolveServer) testEmbeddedByValue()                       {}

// UnsafeGRPCMathSolveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCMathSolveServer will
// result in compilation errors.
type UnsafeGRPCMathSolveServer interface {
	mustEmbedUnimplementedGRPCMathSolveServer()
}

func RegisterGRPCMathSolveServer(s grpc.ServiceRegistrar, srv GRPCMathSolveServer) {
	// If the following call pancis, it indicates UnimplementedGRPCMathSolveServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GRPCMathSolve_ServiceDesc, srv)
}

func _GRPCMathSolve_MetaDataSolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaDataSolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCMathSolveServer).MetaDataSolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCMathSolve_MetaDataSolve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCMathSolveServer).MetaDataSolve(ctx, req.(*MetaDataSolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCMathSolve_Solve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCMathSolveServer).Solve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCMathSolve_Solve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCMathSolveServer).Solve(ctx, req.(*SolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCMathSolve_ServiceDesc is the grpc.ServiceDesc for GRPCMathSolve service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCMathSolve_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mathsolve.GRPCMathSolve",
	HandlerType: (*GRPCMathSolveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "meta_data_solve",
			Handler:    _GRPCMathSolve_MetaDataSolve_Handler,
		},
		{
			MethodName: "solve",
			Handler:    _GRPCMathSolve_Solve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_math_solve.proto",
}
