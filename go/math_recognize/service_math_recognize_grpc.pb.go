// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: service_math_recognize.proto

package mathrecognize

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GRPCMathRecognize_MetaDataRecognize_FullMethodName = "/mathrecognize.GRPCMathRecognize/meta_data_recognize"
	GRPCMathRecognize_Recognize_FullMethodName         = "/mathrecognize.GRPCMathRecognize/recognize"
	GRPCMathRecognize_NormalizeForSympy_FullMethodName = "/mathrecognize.GRPCMathRecognize/normalize_for_sympy"
	GRPCMathRecognize_RenderLatex_FullMethodName       = "/mathrecognize.GRPCMathRecognize/render_latex"
)

// GRPCMathRecognizeClient is the client API for GRPCMathRecognize service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCMathRecognizeClient interface {
	MetaDataRecognize(ctx context.Context, in *MetaDataRecognizeRequest, opts ...grpc.CallOption) (*MetaDataRecognizeResponse, error)
	Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognizeResponse, error)
	NormalizeForSympy(ctx context.Context, in *NormalizeForSympyRequest, opts ...grpc.CallOption) (*NormalizeForSympyResponse, error)
	RenderLatex(ctx context.Context, in *RenderLatexRequest, opts ...grpc.CallOption) (*RenderLatexResponse, error)
}

type gRPCMathRecognizeClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCMathRecognizeClient(cc grpc.ClientConnInterface) GRPCMathRecognizeClient {
	return &gRPCMathRecognizeClient{cc}
}

func (c *gRPCMathRecognizeClient) MetaDataRecognize(ctx context.Context, in *MetaDataRecognizeRequest, opts ...grpc.CallOption) (*MetaDataRecognizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetaDataRecognizeResponse)
	err := c.cc.Invoke(ctx, GRPCMathRecognize_MetaDataRecognize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCMathRecognizeClient) Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecognizeResponse)
	err := c.cc.Invoke(ctx, GRPCMathRecognize_Recognize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCMathRecognizeClient) NormalizeForSympy(ctx context.Context, in *NormalizeForSympyRequest, opts ...grpc.CallOption) (*NormalizeForSympyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NormalizeForSympyResponse)
	err := c.cc.Invoke(ctx, GRPCMathRecognize_NormalizeForSympy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCMathRecognizeClient) RenderLatex(ctx context.Context, in *RenderLatexRequest, opts ...grpc.CallOption) (*RenderLatexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenderLatexResponse)
	err := c.cc.Invoke(ctx, GRPCMathRecognize_RenderLatex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCMathRecognizeServer is the server API for GRPCMathRecognize service.
// All implementations must embed UnimplementedGRPCMathRecognizeServer
// for forward compatibility.
type GRPCMathRecognizeServer interface {
	MetaDataRecognize(context.Context, *MetaDataRecognizeRequest) (*MetaDataRecognizeResponse, error)
	Recognize(context.Context, *RecognizeRequest) (*RecognizeResponse, error)
	NormalizeForSympy(context.Context, *NormalizeForSympyRequest) (*NormalizeForSympyResponse, error)
	RenderLatex(context.Context, *RenderLatexRequest) (*RenderLatexResponse, error)
	mustEmbedUnimplementedGRPCMathRecognizeServer()
}

// UnimplementedGRPCMathRecognizeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGRPCMathRecognizeServer struct{}

func (UnimplementedGRPCMathRecognizeServer) MetaDataRecognize(context.Context, *MetaDataRecognizeRequest) (*MetaDataRecognizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetaDataRecognize not implemented")
}
func (UnimplementedGRPCMathRecognizeServer) Recognize(context.Context, *RecognizeRequest) (*RecognizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recognize not implemented")
}
func (UnimplementedGRPCMathRecognizeServer) NormalizeForSympy(context.Context, *NormalizeForSympyRequest) (*NormalizeForSympyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NormalizeForSympy not implemented")
}
func (UnimplementedGRPCMathRecognizeServer) RenderLatex(context.Context, *RenderLatexRequest) (*RenderLatexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderLatex not implemented")
}
func (UnimplementedGRPCMathRecognizeServer) mustEmbedUnimplementedGRPCMathRecognizeServer() {}
func (UnimplementedGRPCMathRecognizeServer) testEmbeddedByValue()                           {}

// UnsafeGRPCMathRecognizeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCMathRecognizeServer will
// result in compilation errors.
type UnsafeGRPCMathRecognizeServer interface {
	mustEmbedUnimplementedGRPCMathRecognizeServer()
}

func RegisterGRPCMathRecognizeServer(s grpc.ServiceRegistrar, srv GRPCMathRecognizeServer) {
	// If the following call pancis, it indicates UnimplementedGRPCMathRecognizeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GRPCMathRecognize_ServiceDesc, srv)
}

func _GRPCMathRecognize_MetaDataRecognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaDataRecognizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCMathRecognizeServer).MetaDataRecognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCMathRecognize_MetaDataRecognize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCMathRecognizeServer).MetaDataRecognize(ctx, req.(*MetaDataRecognizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCMathRecognize_Recognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCMathRecognizeServer).Recognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCMathRecognize_Recognize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCMathRecognizeServer).Recognize(ctx, req.(*RecognizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCMathRecognize_NormalizeForSympy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NormalizeForSympyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCMathRecognizeServer).NormalizeForSympy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCMathRecognize_NormalizeForSympy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCMathRecognizeServer).NormalizeForSympy(ctx, req.(*NormalizeForSympyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCMathRecognize_RenderLatex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderLatexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCMathRecognizeServer).RenderLatex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCMathRecognize_RenderLatex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCMathRecognizeServer).RenderLatex(ctx, req.(*RenderLatexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCMathRecognize_ServiceDesc is the grpc.ServiceDesc for GRPCMathRecognize service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCMathRecognize_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mathrecognize.GRPCMathRecognize",
	HandlerType: (*GRPCMathRecognizeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "meta_data_recognize",
			Handler:    _GRPCMathRecognize_MetaDataRecognize_Handler,
		},
		{
			MethodName: "recognize",
			Handler:    _GRPCMathRecognize_Recognize_Handler,
		},
		{
			MethodName: "normalize_for_sympy",
			Handler:    _GRPCMathRecognize_NormalizeForSympy_Handler,
		},
		{
			MethodName: "render_latex",
			Handler:    _GRPCMathRecognize_RenderLatex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_math_recognize.proto",
}
