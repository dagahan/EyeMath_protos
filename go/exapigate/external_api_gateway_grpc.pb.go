// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: external_api_gateway.proto

package exapigate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExternalApiGateway_Register_FullMethodName       = "/ExternalApiGateway.ExternalApiGateway/register"
	ExternalApiGateway_Login_FullMethodName          = "/ExternalApiGateway.ExternalApiGateway/login"
	ExternalApiGateway_IsAdmin_FullMethodName        = "/ExternalApiGateway.ExternalApiGateway/is_admin"
	ExternalApiGateway_MathSolver_FullMethodName     = "/ExternalApiGateway.ExternalApiGateway/math_solver"
	ExternalApiGateway_MathRecognizer_FullMethodName = "/ExternalApiGateway.ExternalApiGateway/math_recognizer"
)

// ExternalApiGatewayClient is the client API for ExternalApiGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalApiGatewayClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	IsAdmin(ctx context.Context, in *IsAdminRequest, opts ...grpc.CallOption) (*IsAdminResponse, error)
	MathSolver(ctx context.Context, in *MathSolverRequest, opts ...grpc.CallOption) (*MathSolverResponse, error)
	MathRecognizer(ctx context.Context, in *MathRecognizerRequest, opts ...grpc.CallOption) (*MathRecognizerResponse, error)
}

type externalApiGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalApiGatewayClient(cc grpc.ClientConnInterface) ExternalApiGatewayClient {
	return &externalApiGatewayClient{cc}
}

func (c *externalApiGatewayClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, ExternalApiGateway_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalApiGatewayClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, ExternalApiGateway_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalApiGatewayClient) IsAdmin(ctx context.Context, in *IsAdminRequest, opts ...grpc.CallOption) (*IsAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsAdminResponse)
	err := c.cc.Invoke(ctx, ExternalApiGateway_IsAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalApiGatewayClient) MathSolver(ctx context.Context, in *MathSolverRequest, opts ...grpc.CallOption) (*MathSolverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MathSolverResponse)
	err := c.cc.Invoke(ctx, ExternalApiGateway_MathSolver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalApiGatewayClient) MathRecognizer(ctx context.Context, in *MathRecognizerRequest, opts ...grpc.CallOption) (*MathRecognizerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MathRecognizerResponse)
	err := c.cc.Invoke(ctx, ExternalApiGateway_MathRecognizer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalApiGatewayServer is the server API for ExternalApiGateway service.
// All implementations must embed UnimplementedExternalApiGatewayServer
// for forward compatibility.
type ExternalApiGatewayServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	IsAdmin(context.Context, *IsAdminRequest) (*IsAdminResponse, error)
	MathSolver(context.Context, *MathSolverRequest) (*MathSolverResponse, error)
	MathRecognizer(context.Context, *MathRecognizerRequest) (*MathRecognizerResponse, error)
	mustEmbedUnimplementedExternalApiGatewayServer()
}

// UnimplementedExternalApiGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExternalApiGatewayServer struct{}

func (UnimplementedExternalApiGatewayServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedExternalApiGatewayServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedExternalApiGatewayServer) IsAdmin(context.Context, *IsAdminRequest) (*IsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAdmin not implemented")
}
func (UnimplementedExternalApiGatewayServer) MathSolver(context.Context, *MathSolverRequest) (*MathSolverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MathSolver not implemented")
}
func (UnimplementedExternalApiGatewayServer) MathRecognizer(context.Context, *MathRecognizerRequest) (*MathRecognizerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MathRecognizer not implemented")
}
func (UnimplementedExternalApiGatewayServer) mustEmbedUnimplementedExternalApiGatewayServer() {}
func (UnimplementedExternalApiGatewayServer) testEmbeddedByValue()                            {}

// UnsafeExternalApiGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalApiGatewayServer will
// result in compilation errors.
type UnsafeExternalApiGatewayServer interface {
	mustEmbedUnimplementedExternalApiGatewayServer()
}

func RegisterExternalApiGatewayServer(s grpc.ServiceRegistrar, srv ExternalApiGatewayServer) {
	// If the following call pancis, it indicates UnimplementedExternalApiGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExternalApiGateway_ServiceDesc, srv)
}

func _ExternalApiGateway_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalApiGatewayServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalApiGateway_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalApiGatewayServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalApiGateway_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalApiGatewayServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalApiGateway_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalApiGatewayServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalApiGateway_IsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalApiGatewayServer).IsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalApiGateway_IsAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalApiGatewayServer).IsAdmin(ctx, req.(*IsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalApiGateway_MathSolver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathSolverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalApiGatewayServer).MathSolver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalApiGateway_MathSolver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalApiGatewayServer).MathSolver(ctx, req.(*MathSolverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalApiGateway_MathRecognizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRecognizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalApiGatewayServer).MathRecognizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalApiGateway_MathRecognizer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalApiGatewayServer).MathRecognizer(ctx, req.(*MathRecognizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalApiGateway_ServiceDesc is the grpc.ServiceDesc for ExternalApiGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalApiGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ExternalApiGateway.ExternalApiGateway",
	HandlerType: (*ExternalApiGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register",
			Handler:    _ExternalApiGateway_Register_Handler,
		},
		{
			MethodName: "login",
			Handler:    _ExternalApiGateway_Login_Handler,
		},
		{
			MethodName: "is_admin",
			Handler:    _ExternalApiGateway_IsAdmin_Handler,
		},
		{
			MethodName: "math_solver",
			Handler:    _ExternalApiGateway_MathSolver_Handler,
		},
		{
			MethodName: "math_recognizer",
			Handler:    _ExternalApiGateway_MathRecognizer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external_api_gateway.proto",
}
